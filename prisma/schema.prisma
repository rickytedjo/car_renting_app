generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid()) @db.Uuid

  username String @db.VarChar(100)
  email    String @unique @db.VarChar(100)
  password String

  is_admin    Boolean  @default(false) @db.Boolean // Admin / Corp
  last_viewed DateTime @db.Timestamp()

  created_at DateTime  @default(now()) @db.Timestamp()
  updated_at DateTime  @updatedAt @db.Timestamp()
  deleted_at DateTime? @db.Timestamp()
  is_deleted Boolean   @default(false) @db.Boolean

  booking_admin Booking[] @relation(name: "booking_admin")
  booking_corp  Booking[] @relation(name: "booking_corp")

  @@map("user")
}

enum DriverStatus {
  OCCUPIED
  FREE
}

model Driver {
  id String @id @default(uuid()) @db.Uuid

  name String @db.VarChar(100)

  status DriverStatus @default(FREE)

  created_at DateTime  @default(now()) @db.Timestamp()
  updated_at DateTime  @updatedAt @db.Timestamp()
  deleted_at DateTime? @db.Timestamp()
  is_deleted Boolean   @default(false) @db.Boolean

  bookings Booking[]

  @@map("driver")
}

enum VehicleStatus {
  FREE
  USED
}

model Vehicle {
  id String @id @default(uuid()) @db.Uuid

  name String @db.VarChar(50)

  status VehicleStatus @default(FREE)

  created_at DateTime  @default(now()) @db.Timestamp()
  updated_at DateTime  @updatedAt @db.Timestamp()
  deleted_at DateTime? @db.Timestamp()
  is_deleted Boolean   @default(false) @db.Boolean

  bookings Booking[]

  @@map("vehicle")
}

enum BookingStatus {
  ONGOING
  FINISHED
  PENDING
}

model Booking {
  id String @id @default(uuid()) @db.Uuid

  date_start DateTime @db.Timestamp()
  date_end   DateTime @db.Timestamp()

  status BookingStatus @default(PENDING)

  admin_id      String @db.Uuid
  booking_admin User   @relation(name: "booking_admin", references: [id], fields: [admin_id])

  admin_approval Boolean @default(false) @db.Boolean

  corp_id      String @db.Uuid
  booking_corp User   @relation(name: "booking_corp", references: [id], fields: [corp_id])

  corp_approval Boolean @default(false) @db.Boolean

  vehicle_id     String  @db.Uuid
  booked_vehicle Vehicle @relation(references: [id], fields: [vehicle_id])

  driver_id     String @db.Uuid
  booked_driver Driver @relation(references: [id], fields: [driver_id])

  created_at DateTime  @default(now()) @db.Timestamp()
  updated_at DateTime  @updatedAt @db.Timestamp()
  deleted_at DateTime? @db.Timestamp()
  is_deleted Boolean   @default(false) @db.Boolean

  @@map("booking")
}
